{ binaryGlyphTokens }   = require './keyTokens'
comment                 = require './commentSignal'
{ createMalBoolean }    = require './mal-type-utilities'
{ createMalIdentifier } = require './mal-type-utilities'
{ createMalIgnore }     = require './mal-type-utilities'
{ createMalIndex }      = require './mal-type-utilities'
{ createMalList }       = require './mal-type-utilities'
{ createMalNil }        = require './mal-type-utilities'
{ createMalNumber }     = require './mal-type-utilities'
{ createMalString }     = require './mal-type-utilities'
{ createMalSymbol }     = require './mal-type-utilities'
{ deref }               = require './keyTokens'
{ derefGlyph }          = require './keyTokens'
{ extractJsValue }      = require './mal-type-utilities'
{ _false }              = require './keyTokens'
{ glyphTokens }         = require './keyTokens'
{ ignore }              = require './keyTokens'

{ ignore! }               = require './keyTokens'
{ ignore!Glyph }          = require './keyTokens'
{ ignoreIfTrue }          = require './keyTokens'
{ ignoreIfTrueGlyph }     = require './keyTokens'
{ ignoreUnlessTrue }      = require './keyTokens'
{ ignoreUnlessTrueGlyph } = require './keyTokens'

{ indexEnd }            = require './keyTokens'
{ indexStart }          = require './keyTokens'
{ keyTokens }           = require './keyTokens'
{ listEnd }             = require './keyTokens'
{ listStart }           = require './keyTokens'
{ nil }                 = require './keyTokens'
{ quasiquote }          = require './keyTokens'
{ quote }               = require './keyTokens'
{ spliceUnquote }       = require './keyTokens'
{ unquote }             = require './keyTokens'
{ quasiquoteGlyph }     = require './keyTokens'
{ quoteGlyph }          = require './keyTokens'
{ spliceUnquoteGlyph }  = require './keyTokens'
{ unquoteGlyph }        = require './keyTokens'
{ reverse }             = require './linked-list'
{ _true }               = require './keyTokens'

atomize = \token ->
  createMalValue = switch
    when nil? token       then createMalNil
    when ignore? token    then createMalIgnore
    when boolean? token   then ; createMalBoolean parseBoolean ;
    when string? token    then createMalString
    when identifer? token then createMalIdentifier
    when integer? token   then ; createMalNumber parseInt10 ;
    when float? token     then ; createMalNumber parseFloat10 ;
    else                       createMalSymbol
  createMalValue token

boolean? = \token ->
  token in [_false, _true]

float? = \token ->
  /^(-|\+)?[1-9]\d*\.\d+$/.test token

binaryGlyph? = \token ->
  token in binaryGlyphTokens

glyph? = \token ->
  token in glyphTokens

ignore? = \token ->
  token == ignore

indexStart? = \token ->
  token == indexStart

integer? = \token ->
  /^(?:0|(?:(-|\+)?[1-9]\d*$))/.test token

listStart? = \token ->
  token == listStart

nil? = \token ->
  token == nil

_parse = (token, tokens) ->
  switch
    when listStart? token
      parseList tokens
    when indexStart? token
      parseIndex tokens
    when glyph? token
      parseGlyph (glyphIndex[token], tokens) 
    when binaryGlyph? token
      parseBinaryGlyph (binaryGlyphIndex[token], tokens)
    else
      atomize token

parse = \tokens ->
  return comment if tokens == comment
  _parse (tokens.shift(), tokens)

parseBinaryGlyph = (keyword, tokens) ->
  createMalList (
    createMalSymbol keyword
    createMalList (
      parse tokens
      createMalList (parse tokens)))

parseBoolean = \token ->
  token == _true

parseFloat10 = \token ->
  parseFloat (token, 10)

parseGlyph = (keyword, tokens) ->
  createMalList (
    (createMalSymbol keyword),
    (createMalList (parse tokens)))

parseIndex = \tokens ->
  jsIndex = {}
  key = null
  keyStep? = true

  until (token = tokens.shift()) == indexEnd
    if keyStep?
      key = _parse (token, tokens)
      keyStep? = false
    else
      jsIndex[extractJsValue key] = _parse (token, tokens)
      keyStep? = true

  createMalIndex jsIndex

parseInt10 = \token ->
  parseInt (token, 10)

parseList = \tokens ->
  malList = createMalList ()
  until (token = tokens.shift()) == listEnd
    malList = createMalList (
      (_parse (token, tokens)),
      malList)
  reverse malList

startsWith? = \char \token ->
  token[0] == char

glyphIndex = {}
glyphIndex[derefGlyph]         = deref
glyphIndex[ignore!Glyph]       = ignore!
glyphIndex[quasiquoteGlyph]    = quasiquote
glyphIndex[quoteGlyph]         = quote
glyphIndex[spliceUnquoteGlyph] = spliceUnquote
glyphIndex[unquoteGlyph]       = unquote

binaryGlyphIndex = {}
binaryGlyphIndex[ignoreIfTrueGlyph]     = ignoreIfTrue
binaryGlyphIndex[ignoreUnlessTrueGlyph] = ignoreUnlessTrue

string?    = startsWith? '"'
identifer? = startsWith? ':'

module.exports = parse
