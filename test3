fix = \f ->
  (\x -> f (\y -> x x y)) (\x -> f (\y -> x x y))

fix (\k \n -> if n == 0 then 1 else n * k (n - 1))

(\x -> (\k \n -> if n == 0 then 1 else n * k (n - 1)) (\y -> x x y))
  (\x -> (\k \n -> if n == 0 then 1 else n * k (n - 1)) (\y -> x x y))

(\x \n -> if n == 0 then 1 else n * (\y -> x x y) (n - 1))
  (\x \n -> if n == 0 then 1 else n * (\y -> x x y) (n - 1))

\n ->
  if n == 0
    1
  else
    n * (\y -> (\x \n -> if n == 0 then 1 else n * (\y -> x x y) (n - 1)) (\x \n -> if n == 0 then 1 else n * (\y -> x x y) (n - 1)) y) (n - 1)

\n ->
  if n == 0
    1
  else
    n * (\y -> fix F (n - 1))


------------------------------------------------

(fn* (f)
  (
    (fn* (x) (f (fn* (y) ((x x) y))))
    (fn* (x) (f (fn* (y) ((x x) y))))
  )
)

(fn* (f)
  (
    f (fn* (y)
      (
        (fn* (x) (f (fn* (y) ((x x) y))))
        (fn* (x) (f (fn* (y) ((x x) y))))
      )
    y)
  )
)

(fn* (f)
  (
    f (fn* (y)
      (
        f (fn* (y)
          (
            (fn* (x) (f (fn* (y) ((x x) y))))
            (fn* (x) (f (fn* (y) ((x x) y))))
          )
        y)
      )
    y)
  )
)

(fn* (f)
  (
    f (fn* (y)
      (
        f (fn* (y)
          (
            f (fn* (y)
              (
                (fn* (x) (f (fn* (y) ((x x) y))))
                (fn* (x) (f (fn* (y) ((x x) y))))
              )
            y)
          )
        y)
      )
    y)
  )
)


------------------------------------------------
F = (fn* (k cache)
      (fn* (n)
        (if (contains? cache n)
          (get cache n)
          (let* (res (n * (k (- n 1) cache))
            (do (set! cache n res) res)))))

(fn* (f cache)
  (
    (fn* (x cache) (f (fn* (y) ((x x cache) y)) cache))
    (fn* (x cache) (f (fn* (y) ((x x cache) y)) cache))
    cache
  )
)

(fn* (f cache)
  (
    f (fn* (y)
      (
        ((
          (fn* (x cache) (f (fn* (y) ((x x cache) y)) cache))
          (fn* (x cache) (f (fn* (y) ((x x cache) y)) cache))
          cache
        )
      y)
    y)) cache)
  )
)

(fn* (f)
  (
    f (fn* (y)
      (
        f (fn* (y)
          (
            (fn* (x) (f (fn* (y) ((x x) y))))
            (fn* (x) (f (fn* (y) ((x x) y))))
          )
        y)
      )
    y)
  )
)

(fn* (f)
  (
    f (fn* (y)
      (
        f (fn* (y)
          (
            f (fn* (y)
              (
                (fn* (x) (f (fn* (y) ((x x) y))))
                (fn* (x) (f (fn* (y) ((x x) y))))
              )
            y)
          )
        y)
      )
    y)
  )
)
