(do

  (def! or (macro* (& xs)
    `(if (empty? '~xs)
      false
      (let* (-query- ~(car xs))
        (if -query-
          -query-
          (or ~@(cdr xs)))))))

  (def! cond (macro* (& xs)
    `(if (or (empty? '~xs) (empty? '~(cdr xs)))
      nil
      (let* (-query- ~(car xs))
        (if -query-
          ~(car (cdr xs))
          (cond ~@(cdr (cdr xs))))))))

  (def! -> (macro* (& xs)
    `(if (empty? '~xs)
      nil
      (let* (-base- ~(car xs))
        (if (empty? '~(cdr xs))
          -base-
          (let* (-fn- ~(car (cdr xs)))
            (if (empty? '(cdr (cdr xs)))
              (-fn- -base-)
              (-> (-fn- -base-) ~@(cdr (cdr xs))))))))))
          

)
