{ car }                       = require './linked-list'
{ createMalCorePureFunction } = require './type-utilities'
{ createMalList }             = require './type-utilities'
{ createMalSymbol }           = require './type-utilities'
{ extractJsValue }            = require './type-utilities'
{ fromArray }                 = require './linked-list'
{ fromMalIndex }              = require './index-utilities'
{ malList? }                  = require './type-utilities'
_process                      = require './_process'
{ toArray }                   = require './linked-list'
tokenizeAndParse              = require './tokenizeAndParse'
{ toPartialArray }            = require './linked-list'

getEnvironment = \config ->
  { environment } = config

  apply = \malArgs ->
    [malFn, malArgList] = toArray malArgs
    _eval (createMalList (malFn, malArgList))

  call = \malArgs ->
    _eval malArgs

  _eval = \malVal ->
    _process_ [environment] malVal

  _evalListHead = \malArgs ->
    _eval (car malArgs)

  evalString = \malArgs ->
    ; _eval tokenizeAndParse stripQuotes extractJsValue car ; malArgs

  evalWithBareEnv = \malArgs ->
    [expr, localEnv] = toPartialArray (2, malArgs)
    _process_ [(fromMalIndex localEnv)] expr

  evalWithEnv = \malArgs ->
    [expr, localEnv] = toPartialArray (2, malArgs)
    _process_ [(fromMalIndex localEnv), environment] expr

  parse = \malArgs ->
    tokenizeAndParse (stripQuotes (extractJsValue (car malArgs)))

  functionsOnMalValues = {
    #'eval-with-bare-env' : evalWithBareEnv
    #'eval-with-env'      : evalWithEnv
    parse : parse
  }

  setCoreFnsOnMalValues! (environment, functionsOnMalValues)
  return environment

# WET.
setCoreFnsOnMalValues! = (env, fns) ->
  for own fnName, fn of fns
    env[fnName] = createMalCorePureFunction fn 

# WET.
stripQuotes = \jsString ->
  jsString[1 .. -2]

_process_ = _process (\malVal -> malVal)

module.exports = getEnvironment
