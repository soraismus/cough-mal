{ car }                       = require './linked-list'
{ createErlCorePureFunction } = require './type-utilities'
{ createErlList }             = require './type-utilities'
{ createErlSymbol }           = require './type-utilities'
{ extractJsValue }            = require './type-utilities'
{ fromArray }                 = require './linked-list'
{ fromErlIndex }              = require './index-utilities'
{ erlList? }                  = require './type-utilities'
_process                      = require './_process'
{ toArray }                   = require './linked-list'
tokenizeAndParse              = require './tokenizeAndParse'
{ toPartialArray }            = require './linked-list'

getEnvironment = \config ->
  { environment } = config

  apply = \erlArgs ->
    [erlFn, erlArgList] = toArray erlArgs
    _eval (createErlList (erlFn, erlArgList))

  call = \erlArgs ->
    _eval erlArgs

  _eval = \erlVal ->
    _process_ [environment] erlVal

  _evalListHead = \erlArgs ->
    _eval (car erlArgs)

  evalString = \erlArgs ->
    ; _eval tokenizeAndParse stripQuotes extractJsValue car ; erlArgs

  evalWithBareEnv = \erlArgs ->
    [expr, localEnv] = toPartialArray (2, erlArgs)
    _process_ [(fromErlIndex localEnv)] expr

  evalWithEnv = \erlArgs ->
    [expr, localEnv] = toPartialArray (2, erlArgs)
    _process_ [(fromErlIndex localEnv), environment] expr

  parse = \erlArgs ->
    tokenizeAndParse (stripQuotes (extractJsValue (car erlArgs)))

  functionsOnErlValues = {
    #'eval-with-bare-env' : evalWithBareEnv
    #'eval-with-env'      : evalWithEnv
    parse : parse
  }

  setCoreFnsOnErlValues! (environment, functionsOnErlValues)
  return environment

# WET.
setCoreFnsOnErlValues! = (env, fns) ->
  for own fnName, fn of fns
    env[fnName] = createErlCorePureFunction fn 

# WET.
stripQuotes = \jsString ->
  jsString[1 .. -2]

_process_ = _process (\erlVal -> erlVal)

module.exports = getEnvironment
