commentSignal                 = require './commentSignal'
{ extractJsValue }            = require './type-utilities'
{ indexEnd }                  = require './keyTokens'
{ indexStart }                = require './keyTokens'
{ listEnd }                   = require './keyTokens'
{ listStart }                 = require './keyTokens'
{ malAtom? }                  = require './type-utilities'
{ malCoreEffectfulFunction? } = require './type-utilities'
{ malCorePureFunction? }      = require './type-utilities'
{ malIdentifier? }            = require './type-utilities'
{ malIgnore? }                = require './type-utilities'
{ malIndex? }                 = require './type-utilities'
{ malKeyword? }               = require './type-utilities'
{ malList? }                  = require './type-utilities'
{ malMacro? }                 = require './type-utilities'
{ malNil? }                   = require './type-utilities'
{ malString? }                = require './type-utilities'
{ malUserPureFunction? }      = require './type-utilities'
{ reduce }                    = require './linked-list'

adjoinMalValue = (printReadably?) -> (memo, malValue) ->
  serialized = serialize (malValue, printReadably?)
  if memo.length == 0
    serialized
  else
    "#{memo} #{serialized}"

serialize = (malExpr, printReadably?) ->
  return commentSignal if malExpr == commentSignal
  _serialize = switch
    when malList? malExpr                  then serializeList
    when malIgnore? malExpr                then \x -> ignoreLabel
    when malIndex? malExpr                 then serializeIndex
    when malKeyword? malExpr               then \x -> keywordLabel
    when malCoreEffectfulFunction? malExpr then \x -> coreEffectfulFunctionLabel
    when malCorePureFunction? malExpr      then \x -> corePureFunctionLabel
    when malUserPureFunction? malExpr      then \x -> userPureFunctionLabel
    when malMacro? malExpr                 then \x -> macroLabel
    when malNil? malExpr                   then \x -> nilLabel
    when malIdentifier? malExpr            then serializeIdentifier
    when malString? malExpr                then serializeString
    when malAtom? malExpr                  then serializeAtom
    when ? (malExpr.jsValue)               then extractJsValue
    else                                        \x -> x
  _serialize (malExpr, printReadably?)

serializeAtom = (malAtom, printReadably?) ->
  "(atom #{serialize (malAtom.malValue, printReadably?)})"

serializeIdentifier = (malString, printReadably?) ->
  return extractJsValue malString

serializeIndex = (malIndex, printReadably?) ->
  jsIndex = malIndex.jsValue

  memo = ''

  for own key, malValue of jsIndex
    memo = if memo == ''
      "#{key} #{serialize (malValue, printReadably?)}"
    else
      "#{memo}, #{key} #{serialize (malValue, printReadably?)}"

  indexStart + memo + indexEnd

serializeList = (malList, printReadably?) ->
  serializedList = reduce ("", (adjoinMalValue printReadably?), malList)
  listStart + serializedList + listEnd

serializeString = (malString, printReadably?) ->
  jsString = stripQuotes (extractJsValue malString)
  return jsString unless printReadably?
  jsString.replace(/\\/g, '\\\\')
          .replace(/"/g,  '\\"')
          .replace(/\n/g, '\\n')

# WET.
stripQuotes = \jsString ->
  jsString[1 .. -2]

coreEffectfulFunctionLabel = '<effectful core function>'
corePureFunctionLabel      = '<core function>'
ignoreLabel                = '<ignore>'
keywordLabel               = '<keyword>'
macroLabel                 = '<macro>'
nilLabel                   = 'nil'
userPureFunctionLabel      = '<function>'

module.exports = serialize
