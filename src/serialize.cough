commentSignal                 = require './commentSignal'
{ extractJsValue }            = require './type-utilities'
{ indexEnd }                  = require './keyTokens'
{ indexStart }                = require './keyTokens'
{ listEnd }                   = require './keyTokens'
{ listStart }                 = require './keyTokens'
{ erlAtom? }                  = require './type-utilities'
{ erlCoreEffectfulFunction? } = require './type-utilities'
{ erlCorePureFunction? }      = require './type-utilities'
{ erlIdentifier? }            = require './type-utilities'
{ erlIgnore? }                = require './type-utilities'
{ erlIndex? }                 = require './type-utilities'
{ erlKeyword? }               = require './type-utilities'
{ erlList? }                  = require './type-utilities'
{ erlMacro? }                 = require './type-utilities'
{ erlNil? }                   = require './type-utilities'
{ erlString? }                = require './type-utilities'
{ erlUserPureFunction? }      = require './type-utilities'
{ reduce }                    = require './linked-list'

adjoinErlValue = (printReadably?) -> (memo, erlValue) ->
  serialized = serialize (erlValue, printReadably?)
  if memo.length == 0
    serialized
  else
    "#{memo} #{serialized}"

serialize = (erlExpr, printReadably?) ->
  return commentSignal if erlExpr == commentSignal
  _serialize = switch
    when erlList? erlExpr                  then serializeList
    when erlIgnore? erlExpr                then \x -> ignoreLabel
    when erlIndex? erlExpr                 then serializeIndex
    when erlKeyword? erlExpr               then \x -> keywordLabel
    when erlCoreEffectfulFunction? erlExpr then \x -> coreEffectfulFunctionLabel
    when erlCorePureFunction? erlExpr      then \x -> corePureFunctionLabel
    when erlUserPureFunction? erlExpr      then \x -> userPureFunctionLabel
    when erlMacro? erlExpr                 then \x -> macroLabel
    when erlNil? erlExpr                   then \x -> nilLabel
    when erlIdentifier? erlExpr            then serializeIdentifier
    when erlString? erlExpr                then serializeString
    when erlAtom? erlExpr                  then serializeAtom
    when ? (erlExpr.jsValue)               then extractJsValue
    else                                        \x -> x
  _serialize (erlExpr, printReadably?)

serializeAtom = (erlAtom, printReadably?) ->
  "(atom #{serialize (erlAtom.erlValue, printReadably?)})"

serializeIdentifier = (erlString, printReadably?) ->
  return extractJsValue erlString

serializeIndex = (erlIndex, printReadably?) ->
  jsIndex = erlIndex.jsValue

  memo = ''

  for own key, erlValue of jsIndex
    memo = if memo == ''
      "#{key} #{serialize (erlValue, printReadably?)}"
    else
      "#{memo}, #{key} #{serialize (erlValue, printReadably?)}"

  indexStart + memo + indexEnd

serializeList = (erlList, printReadably?) ->
  serializedList = reduce ("", (adjoinErlValue printReadably?), erlList)
  listStart + serializedList + listEnd

serializeString = (erlString, printReadably?) ->
  jsString = stripQuotes (extractJsValue erlString)
  return jsString unless printReadably?
  jsString.replace(/\\/g, '\\\\')
          .replace(/"/g,  '\\"')
          .replace(/\n/g, '\\n')

# WET.
stripQuotes = \jsString ->
  jsString[1 .. -2]

coreEffectfulFunctionLabel = '<effectful core function>'
corePureFunctionLabel      = '<core function>'
ignoreLabel                = '<ignore>'
keywordLabel               = '<keyword>'
macroLabel                 = '<macro>'
nilLabel                   = 'nil'
userPureFunctionLabel      = '<function>'

module.exports = serialize
