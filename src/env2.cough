{ createErlCoreEffectfulFunction } = require './type-utilities'
serialize                          = require './serialize'
{ toArray }                        = require './linked-list'

getEnvironment = \config ->
  { display, environment } = config
  setCoreEffectfulFnsOnErlValues! display (
    environment, displayEffectsOnErlValues)
  return environment

# WET; cf. 'env1.cough'.
_prStr = (erlArgs, printReadably?) ->
  ((toArray erlArgs)
    .map \erlArg -> serialize (erlArg, printReadably?))
    .join ''

setCoreEffectfulFnsOnErlValues! = (represent) -> (env, fns) ->
  for own fnName, fn of fns
    env[fnName] = createErlCoreEffectfulFunction \erlArgs ->
      represent (fn erlArgs)

displayEffectsOnErlValues = {
  'print'        : \erlArgs -> _prStr (erlArgs, false)
  'pretty-print' : \erlArgs -> _prStr (erlArgs, true)
}

module.exports = getEnvironment
