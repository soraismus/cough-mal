{ createMalCoreEffectfulFunction } = require './type-utilities'
serialize                          = require './serialize'
{ toArray }                        = require './linked-list'

getEnvironment = \config ->
  { display, environment } = config
  setCoreEffectfulFnsOnMalValues! display (
    environment, displayEffectsOnMalValues)
  return environment

_prStr = (malArgs, printReadably?) ->
  ((toArray malArgs)
    .map \malArg -> serialize (malArg, printReadably?))
    .join ''

setCoreEffectfulFnsOnMalValues! = (represent) -> (env, fns) ->
  for own fnName, fn of fns
    env[fnName] = createMalCoreEffectfulFunction \malArgs ->
      represent (fn malArgs)

displayEffectsOnMalValues = {
  'prn'     : \malArgs -> _prStr (malArgs, true)
  'println' : \malArgs -> _prStr (malArgs, false)
}

module.exports = getEnvironment
