_repl      = require '../src/_repl'
readPrompt = require '../src/readPrompt'

display = \values ->
  result = values[-1]
  values[0 .. -1].forEach \value -> console.log(value.value)

if ? process && process.argv.length > 2
  #_environments = '*ARGV*' : fromArray(process.argv[3..].map _createMalString)
  fileName = process.argv[2]
  file = require('fs').readFileSync(fileName).toString()
  display (_repl (file, process.argv[3..]))
  process.exit 0

loop
  display (_repl (readPrompt ()))

###
_display = \malValue ->
  { effect: { type: 'display' }, value: malValue }

environment = getEnvironment _display

_createMalString = \jsString ->
  createMalString('"' + jsString + '"')

repl = (envs, jsString) ->
  try display (serialize (_process envs jsString))
  catch e
    display ("repl error: (" + (serialize e) + ")")

_repl = \jsString ->
  repl ([environment], jsString)

if ? process && process.argv.length > 2
  _environments = [
    { '*ARGV*' : fromArray(process.argv[3..].map _createMalString) }
    environment
  ]

  fileName = process.argv[2]
  file = require('fs').readFileSync(fileName).toString()
  repl (_environments, file)
  process.exit 0
###
