log = console.log
{ addEnv }                   = require './env-utilities'
commentSignal                = require './commentSignal'
{ car }                      = require './mal-list-utilities'
_car = car
{ cdr }                      = require './mal-list-utilities'
_cdr = cdr
{ createJsLinkedList }       = require './linked-list'
{ createMalList }            = require './mal-list-utilities'
_createMalList = createMalList
{ createMalList }            = require './mal-type-utilities'
{ createMalMacro }           = require './mal-type-utilities'
{ createMalString }          = require './mal-type-utilities'
{ createMalSymbol }          = require './mal-type-utilities'
{ createMalUserFunction }    = require './mal-type-utilities'
{ def! }                     = require './keyTokens'
{ _do }                      = require './keyTokens'
{ empty? }                   = require './mal-list-utilities'
_empty? = empty?
{ empty? }                   = require './linked-list' 
extractJsValue               = require './extractJsValue'
{ fn* }                      = require './keyTokens'
{ forEach }                  = require './linked-list'
{ _if }                      = require './keyTokens'
{ let* }                     = require './keyTokens'
{ lookup }                   = require './env-utilities'
{ macro* }                   = require './keyTokens'
{ malCoreFunction? }         = require './mal-type-utilities'
{ malList? }                 = require './mal-type-utilities'
{ malSymbol? }               = require './mal-type-utilities'
{ malUserFunction? }         = require './mal-type-utilities'
{ map }                      = require './linked-list'
{ next }                     = require './mal-list-utilities'
{ quasiquote }               = require './keyTokens'
{ quote }                    = require './keyTokens'
{ spliceUnquote }            = require './keyTokens'
{ unquote }                  = require './keyTokens'
{ recurse }                  = require './linked-list'
{ reduce }                   = require './linked-list'
{ reduceBy2 }                = require './linked-list'
{ setMainEnv }               = require './env-utilities'
{ toArray }                  = require './linked-list'

createFn = (malList, envs) ->
  jsList = malList.jsValue
  malParameterList = jsList.value
  jsCdr = recurse jsList
  malExpr = jsCdr.value
  createMalUserFunction
    malExpression : malExpr
    parameterList : malParameterList

createLocalEnv = (jsParams, malArgs) ->
  _reduce = (env, jsParam) ->
    env[jsParam] = malArgs.value
    malArgs = recurse malArgs
    env
  reduce ({}, _reduce, jsParams)

createMacro = (malList, envs) ->
  jsList = malList.jsValue
  malParameterList = jsList.value
  jsCdr = recurse jsList
  malExpr = jsCdr.value
  createMalMacro
    malExpression : malExpr
    parameterList : malParameterList

defineNewValue = (malList, envs) ->
  jsList = malList.jsValue
  malKey = jsList.value
  jsKey = malKey.jsValue
  jsCdr = recurse jsList
  malExpr = jsCdr.value
  value = _evaluate (malExpr, envs)
  setMainEnv (envs, jsKey, value)

evalAllSideEffects = (malList, envs) ->
  jsList = malList.jsValue
  forEach ((evaluate envs), jsList)

evalCondition = (malList, envs) ->
  jsList = malList.jsValue
  malBoolExpr = jsList.value
  jsCdr0 = recurse jsList
  malExpr0 = jsCdr0.value
  jsCdr1 = recurse jsCdr0
  malExpr1 = jsCdr1.value
  _eval = evaluate envs
  jsBool = extractJsValue malBoolExpr
  _eval (if jsBool then malExpr0 else malExpr1)

evalDefault = (malExpr, envs) ->
  malExpr

evalFnInvocation = (malSymbol, malList, envs) ->
  malFn = _evaluate (malSymbol, envs)
  jsValueList = malList.jsValue
  malArgs = map ((evaluate envs), jsValueList)
  invoke = if malCoreFunction? malFn
      invokeCoreFn
    else if malUserFunction? malFn
      invokeUserFn
    else
      throw 'Value is not a function: ' + malFn.toString()
  invoke (malFn, malArgs, envs)

evalList = (malList, envs) ->
  jsList = malList.jsValue
  car = jsList.value
  cdr = createMalList (recurse jsList)
  switch car.jsValue
    when def!   then defineNewValue (cdr, envs)
    when _do    then evalAllSideEffects (cdr, envs)
    when fn*    then createFn (cdr, envs)
    when macro* then createMacro (cdr, envs)
    when _if    then evalCondition (cdr, envs)
    when let*   then evalWithLocalValue (cdr, envs)
    when quote  then evalQuote (cdr, envs)

    when quasiquote    then evalQuasiquote (cdr, envs)
    when spliceUnquote then ((x, y) -> x)(cdr, envs)
    when unquote       then ((x, y) -> x)(cdr, envs)

    else             evalFnInvocation (car, cdr, envs)

MALQUOTE = createMalSymbol quote
MALCONS = createMalSymbol 'cons'
unquote? = \malValue ->
  malValue.jsValue == unquote

doQuote = \malExpr ->
  _createMalList (
    MALQUOTE,
    createJsLinkedList malExpr)

# TODO: Refactor.
evalQuasiquote = (wrappedMalExpr, envs) ->
  log 'evalQuasiquote'
  log 'wrappedMalExpr: ', wrappedMalExpr
  malExpr = _car wrappedMalExpr
  log 'malExpr: ', malExpr

  if (not malList? malExpr) || _empty? malExpr
    return doQuote malExpr

  carMalExpr = _car malExpr

  if unquote? (_car carMalExpr)
    x0 = carMalExpr
    log 'x0: ', x0
    log (_cdr x0)
    log (_car (_cdr x0))
    x1 = next carMalExpr
    log 'x1: ', x1
    x2 = _evaluate ((next carMalExpr), envs)
    log 'x2: ', x2
    log 'envs: ', envs
    return createMalList (_evaluate (next carMalExpr), envs)

  createMalString "hi"

###
# TODO: Compose `createMalList` and `createJsLinkedList`
parseQuoteGlyph = \tokens ->
  createMalList (
    createJsLinkedList (
      (createMalSymbol quote),
      (createJsLinkedList (parse tokens))))
###

evalQuote = (malExpr, envs) ->
  jsList = malExpr.jsValue
  jsList.value

evalSymbol = (malSymbol, envs) ->
  lookup (envs, malSymbol.jsValue)

_evaluate = (malExpr, envs) ->
  _eval = switch
    when malList? malExpr   then evalList
    when malSymbol? malExpr then evalSymbol
    else                         evalDefault
  _eval (malExpr, envs)

evaluate = \envs \malExpr ->
  return commentSignal if malExpr == commentSignal
  _evaluate (malExpr, envs)

evalWithLocalValue = (malList, envs) ->
  jsList = malList.jsValue
  localBindings = jsList.value
  cdr = recurse jsList
  malExpr = cdr.value
  jsListOfLocalBindings = localBindings.jsValue
  _reduce = (env, malKey, malExpr) ->
    envValue = _evaluate (malExpr, envs)
    #env[malKey.jsValue] = _evaluate (malExpr, envs)
    env[malKey.jsValue] = envValue
    env
  newEnv = reduceBy2 ({}, _reduce, jsListOfLocalBindings)
  _evaluate (malExpr, addEnv (envs, newEnv))

invokeCoreFn = (malCoreFunction, jsListOfMalArgs, envs) ->
  malCoreFunction.jsValue jsListOfMalArgs

invokeUserFn = (malUserFunction, malArgs, envs) ->
  { malExpression, parameterList } = malUserFunction.jsValue
  jsListOfMalValues = parameterList.jsValue
  jsParameters = map (extractJsValue, jsListOfMalValues)
  newEnv = createLocalEnv (jsParameters, malArgs)
  newEnvStack = addEnv (envs, newEnv)
  _evaluate (malExpression, newEnvStack)

module.exports = evaluate
