{ addEnv }                   = require './env-utilities'
{ car }                      = require './linked-list'
{ cdr }                      = require './linked-list'
commentSignal                = require './commentSignal'
{ concat }                   = require './linked-list'
{ cond }                     = require './keyTokens'
{ cons }                     = require './linked-list'
{ createMalList }            = require './mal-type-utilities'
{ createMalMacro }           = require './mal-type-utilities'
{ createMalNumber }           = require './mal-type-utilities'
{ createMalString }          = require './mal-type-utilities'
{ createMalSymbol }          = require './mal-type-utilities'
{ createMalUserFunction }    = require './mal-type-utilities'
{ def! }                     = require './keyTokens'
{ _do }                      = require './keyTokens'
{ empty? }                   = require './linked-list' 
extractJsValue               = require './extractJsValue'
{ fn* }                      = require './keyTokens'
{ forEach }                  = require './linked-list'
{ _if }                      = require './keyTokens'
{ let* }                     = require './keyTokens'
{ lookup }                   = require './env-utilities'
{ macro* }                   = require './keyTokens'
{ malCoreFunction? }         = require './mal-type-utilities'
{ malList? }                 = require './mal-type-utilities'
{ malMacro? }                = require './mal-type-utilities'
{ malNil }                   = require './mal-type-utilities'
{ malSymbol? }               = require './mal-type-utilities'
{ malUserFunction? }         = require './mal-type-utilities'
{ map }                      = require './linked-list'
{ next }                     = require './linked-list'
{ quasiquote }               = require './keyTokens'
{ quote }                    = require './keyTokens'
{ spliceUnquote }            = require './keyTokens'
{ unquote }                  = require './keyTokens'
{ recurse }                  = require './linked-list'
{ reduce }                   = require './linked-list'
{ reduceBy2 }                = require './linked-list'
{ reverse }                  = require './linked-list'
{ setMainEnv }               = require './env-utilities'
{ toArray }                  = require './linked-list'

createFn = (head, malList, envs) ->
  createMalUserFunction
    malExpression : (next malList)
    malParameters : (car malList)

SPLAT-TOKEN = '&'
createLocalEnv = (jsParams, malArgs) ->
  env = {}
  until empty? jsParams
    jsParam = car jsParams
    if jsParam == SPLAT-TOKEN
      env[next jsParams] = malArgs
      return env
    else
      env[jsParam] = car malArgs
      jsParams = cdr jsParams
      malArgs = cdr malArgs
  env

createMacro = (head, malList, envs) ->
  createMalMacro
    malExpression : (car (cdr malList))
    malParameters : (car malList)

defineNewValue = (head, malList, envs) ->
  jsKey = extractJsValue (car malList)
  malValue = _evaluate ((next malList), envs)
  setMainEnv (envs, jsKey, malValue)

MALQUOTE  = createMalSymbol quote
MALCONS   = createMalSymbol 'cons'
MALCONCAT = createMalSymbol 'concat'

doQuote = \malExpr ->
  createMalList (
    MALQUOTE,
    (createMalList malExpr))

doCons = (malExpr, malList) ->
  createMalList (
    MALCONS,
    createMalList (malExpr, (createMalList malList)))

doConcat = (malList0, malList1) ->
  createMalList (
    MALCONCAT,
    createMalList (malList0, malList1))

evalAllSideEffects = (head, malList, envs) ->
  forEach ((evaluate envs), malList)

evalCondition = (head, malList, envs) ->
  jsBool = extractJsValue (_evaluate ((car malList), envs))
  malExpr = if jsBool then next malList else next (cdr malList)
  _evaluate (malExpr, envs)

evalDefault = (malExpr, envs) ->
  malExpr

evalInvocation = (malSymbol, malList, envs) ->
  malInvokable = _evaluate (malSymbol, envs)
  invoke = switch
    when malMacro? malInvokable        then invokeMacro
    when malCoreFunction? malInvokable then invokeCoreFn
    when malUserFunction? malInvokable then invokeUserFn
    else throw 'Value is not a function'
  invoke (malInvokable, map ((evaluate envs), malList), envs)

evalMultiCondition = (head, malList, envs) ->
  until empty? malList
    condition = car malList
    jsBool = extractJsValue (_evaluate ((car condition), envs))
    return _evaluate ((next condition), envs) if jsBool
    malList = cdr malList
  malNil

cons = createMalList

_normalizeQuasiquote = \malExpr ->
  if unquotedExpr? malExpr
    car (cdr malExpr)
  else if spliceUnquotedExpr? malExpr
    concat ((car malExpr), (normalizeQuasiquote (cdr malExpr)))
  else if malList? malExpr
    map (normalizeQuasiquote, malExpr)
  else
    malExpr

normalizeQuasiquote = \malExpr ->
  if not malList? malExpr
    return doQuote malExpr
  if empty? malExpr
    return doQuote malExpr
  _normalizeQuasiquote malExpr

evalQuasiquotedExpr = (head, expr, envs) ->
  _expr = car expr
  switch
    when unquotedExpr? _expr
      _evaluate ((next _expr), envs)
    when malList? _expr
      _evalQuasiquotedExpr (_expr, envs)
    else
      _expr

_evalQuasiquotedExpr = (expr, envs) ->
  manageItem = (memo, item) ->
    switch
      when unquotedExpr? item
        cons(_evaluate(next(item), envs), memo)
      when spliceUnquotedExpr? item
        _manageItem = (_memo, _item) ->
          cons (_evaluate (_item, envs), _memo)
        reduce (memo, _manageItem, (_evaluate ((next item), envs)))
      when malList? item
        cons (_evalQuasiquotedExpr (item, envs), memo)
      else
        cons (item, memo)
  reverse(
    reduce (
      createMalList ()
      manageItem
      expr))

evalQuote = (head, malList, envs) ->
  car malList

evalSymbol = (malSymbol, envs) ->
  lookup (envs, (extractJsValue malSymbol))

_evaluate = (malExpr, envs) ->
  loop
    switch
      when malList? malExpr

        malList = malExpr
        head = car malList
        t1 = cdr malList
        a1 = car t1
        t2 = cdr t1
        a2 = car t2
        t3 = cdr t2
        a3 = car t3

        switch head.jsValue
          when def!
            return defineNewValue (head, (cdr malList), envs) 
          when let*
            _reduce = (env, malKey, malExpr) ->
              envValue = _evaluate (malExpr, envs)
              jsKey = malKey.jsValue
              env[jsKey] = envValue
              env
            malExpr = a2
            envs = addEnv (envs, reduceBy2 ({}, _reduce, a1))

          # How optimize tail calls?
          when _do
            return evalAllSideEffects (head, (cdr malList), envs)

          when _if
            jsBool = (_evaluate (a1, envs)).jsValue
            malExpr = if jsBool then a2 else a3
          when fn*
            return createFn (head, (cdr malList), envs)
          when cond
            return evalMultiCondition (head, (cdr malList), envs)
          when macro*
            return createMacro (head, (cdr malList), envs)
          when quote
            return evalQuote (head, (cdr malList), envs)
          when quasiquote
            return evalQuasiquotedExpr (head, (cdr malList), envs)
          when spliceUnquote
            return ((z, x, y) -> x) (head, (cdr malList), envs)
          when unquote
            return ((z, x, y) -> x) (head, (cdr malList), envs)
          else
            malSymbol = head
            malList = cdr malList

            malInvokable = _evaluate (malSymbol, envs)

            switch
              when malMacro? malInvokable
                return invokeMacro (
                  malInvokable
                  map ((evaluate envs), malList)
                  envs)
              when malCoreFunction? malInvokable
                return invokeCoreFn (
                  malInvokable
                  map((evaluate envs), malList)
                  envs)
              when malUserFunction? malInvokable
                _reduce = (env, malKey, malExpr) ->
                  envValue = _evaluate (malExpr, envs)
                  jsKey = malKey.jsValue
                  env[jsKey] = envValue
                  env

                { malExpression, malParameters } = malInvokable.jsValue

                malArgs = map ((evaluate envs), malList)

                malExpr = malExpression
                jsParameters = map (extractJsValue, malParameters)
                newEnv = createLocalEnv (jsParameters, malArgs)
                envs = addEnv (envs, newEnv)

              else
                throw 'Value is not a function'

      when malSymbol? malExpr
        return evalSymbol (malExpr, envs)
      else
        return evalDefault (malExpr, envs)

evaluate = \envs \malExpr ->
  return commentSignal if malExpr == commentSignal
  _evaluate (malExpr, envs)

evalWithLocalValue = (head, malList, envs) ->
  _reduce = (env, malKey, malExpr) ->
    envValue = _evaluate (malExpr, envs)
    jsKey = extractJsValue malKey
    env[jsKey] = envValue
    env
  newEnv = reduceBy2 ({}, _reduce, (car malList))
  _evaluate ((next malList), addEnv (envs, newEnv))

invokeMacro = (malMacro, malArgs, envs) ->
  _evaluate (invokeUserFn (malMacro, malArgs, envs), envs)

invokeCoreFn = (malCoreFunction, malArgs, envs) ->
  extractJsValue malCoreFunction malArgs

invokeUserFn = (malUserFunction, malArgs, envs) ->
  { malExpression, malParameters } = extractJsValue malUserFunction
  jsParameters = map (extractJsValue, malParameters)
  newEnv = createLocalEnv (jsParameters, malArgs)
  newEnvStack = addEnv (envs, newEnv)
  _evaluate (malExpression, newEnvStack)

spliceUnquote? = \malValue ->
  spliceUnquote == (extractJsValue malValue)

spliceUnquotedExpr? = \malValue ->
  malList? malValue && (spliceUnquote? (car malValue))

unquote? = \malValue ->
  unquote == (extractJsValue malValue)

unquotedExpr? = \malValue ->
  malList? malValue && (unquote? (car malValue))

module.exports = evaluate
