logIndex = 0
serialize = require './serialize'
log = (arg, args...) ->
  console.log ('---', arg, args...)
logBranch = (branch) ->
  console.log ()
  _x = logIndex++
  console.log ('---', 'BRANCH', branch, _x)
  console.log ()
  _x
logFn = (fnName) ->
  console.log ()
  _x = logIndex++
  console.log ('---', 'FN', fnName, _x)
  console.log ()
  _x
logValue = (name, value, avoidPretty?, avoidLong?) ->
  if avoidPretty?
    console.log ("--- #{name} =", value)
  else if avoidLong?
    console.log ("--- #{name} =", serialize value)
  else
    console.log ("--- #{name} =", serialize(value), value)
logResult = (value, logIndex = 0) ->
  console.log ("--- (#{logIndex}) --- result =", serialize(value), value)
  console.log ()
  value

{ addEnv }                   = require './env-utilities'
{ car }                      = require './linked-list'
{ cdr }                      = require './linked-list'
commentSignal                = require './commentSignal'
{ concat }                   = require './linked-list'
{ cons }                     = require './linked-list'
{ createMalIndex }           = require './mal-type-utilities'
{ createMalList }            = require './mal-type-utilities'
{ createMalMacro }           = require './mal-type-utilities'
{ createMalNumber }          = require './mal-type-utilities'
{ createMalString }          = require './mal-type-utilities'
{ createMalSymbol }          = require './mal-type-utilities'
{ createMalUserFunction }    = require './mal-type-utilities'
{ def! }                     = require './keyTokens'
{ _do }                      = require './keyTokens'
{ empty? }                   = require './linked-list' 
{ expand-macro }             = require './keyTokens'
extractJsValue               = require './extractJsValue'
{ fn* }                      = require './keyTokens'
{ forEach }                  = require './linked-list'
{ _if }                      = require './keyTokens'
{ let* }                     = require './keyTokens'
{ lookup }                   = require './env-utilities'
{ macro* }                   = require './keyTokens'
{ malCoreFunction? }         = require './mal-type-utilities'
{ malIndex? }                = require './mal-type-utilities'
{ malList? }                 = require './mal-type-utilities'
{ malMacro? }                = require './mal-type-utilities'
{ malNil }                   = require './mal-type-utilities'
{ malSymbol? }               = require './mal-type-utilities'
{ malUserFunction? }         = require './mal-type-utilities'
{ map }                      = require './linked-list'
{ next }                     = require './linked-list'
{ quasiquote }               = require './keyTokens'
{ quote }                    = require './keyTokens'
{ spliceUnquote }            = require './keyTokens'
{ unquote }                  = require './keyTokens'
{ recurse }                  = require './linked-list'
{ reduce }                   = require './linked-list'
{ reduceBy2 }                = require './linked-list'
{ reverse }                  = require './linked-list'
{ setMainEnv }               = require './env-utilities'
{ toArray }                  = require './linked-list'
{ undef! }                   = require './keyTokens'
{ unsetMainEnv }             = require './env-utilities'

createFn = (head, malList, envs) ->
  createMalUserFunction
    localEnvs     : (envs.slice 0)
    malExpression : (next malList)
    malParameters : (car malList)

SPLAT-TOKEN = '&'
createLocalEnv = (jsParams, malArgs) ->
  #_x = logFn 'createLocalEnv'
  env = {}
  #logValue 'jsParams', jsParams, false, true
  #logValue 'malArgs', malArgs, false, true
  until empty? jsParams
    jsParam = car jsParams
    #logValue 'jsParam', jsParam, true
    if jsParam == SPLAT-TOKEN
      #logBranch 'splat detected'
      env[next jsParams] = malArgs
      #if env['xs']
      #  logValue 'env[xs]', env['xs']
      #return logResult (env, _x)
      return env
    else
      env[jsParam] = car malArgs
      jsParams = cdr jsParams
      malArgs = cdr malArgs
  #return logResult (env, _x)
  env

createMacro = (head, malList, envs) ->
  createMalMacro
    localEnvs     : (envs.slice 0)
    malExpression : (next malList)
    malParameters : (car malList)

defineNewValue = (head, malList, envs) ->
  jsKey = extractJsValue (car malList)
  malValue = _evaluate ((next malList), envs)
  setMainEnv (envs, jsKey, malValue)

undefineValue = (head, malList, envs) ->
  jsKey = extractJsValue (car malList)
  unsetMainEnv (envs, jsKey)

MALQUOTE  = createMalSymbol quote
MALCONS   = createMalSymbol 'cons'
MALCONCAT = createMalSymbol 'concat'

doQuote = \malExpr ->
  createMalList (
    MALQUOTE,
    (createMalList malExpr))

doCons = (malExpr, malList) ->
  createMalList (
    MALCONS,
    createMalList (malExpr, (createMalList malList)))

doConcat = (malList0, malList1) ->
  createMalList (
    MALCONCAT,
    createMalList (malList0, malList1))

evalAllSideEffects = (head, malList, envs) ->
  forEach ((evaluate envs), malList)

evalCondition = (head, malList, envs) ->
  jsBool = extractJsValue (_evaluate ((car malList), envs))
  malExpr = if jsBool then next malList else next (cdr malList)
  _evaluate (malExpr, envs)

evalDefault = (malExpr, envs) ->
  malExpr

evalMultiCondition = (head, malList, envs) ->
  until empty? malList
    condition = car malList
    jsBool = extractJsValue (_evaluate ((car condition), envs))
    return _evaluate ((next condition), envs) if jsBool
    malList = cdr malList
  malNil

cons = createMalList

_normalizeQuasiquote = \malExpr ->
  if unquotedExpr? malExpr
    car (cdr malExpr)
  else if spliceUnquotedExpr? malExpr
    concat ((car malExpr), (normalizeQuasiquote (cdr malExpr)))
  else if malList? malExpr
    map (normalizeQuasiquote, malExpr)
  else
    malExpr

normalizeQuasiquote = \malExpr ->
  if not malList? malExpr
    return doQuote malExpr
  if empty? malExpr
    return doQuote malExpr
  _normalizeQuasiquote malExpr

evalQuasiquotedExpr = (head, expr, envs) ->
  #logFn 'evalQuasiquotedExpr'
  #logValue 'expr', expr, false, true
  #if envs[0]['xs']
    #logValue 'envs[0][xs]', envs[0]['xs'], false, true
  _expr = car expr
  #logValue '_expr', _expr, false, true
  res = switch
    when unquotedExpr? _expr
      #logBranch 'unquotedExpr?'
      _evaluate ((next _expr), envs)
    when malList? _expr
      #logBranch 'malList?'
      _evalQuasiquotedExpr (_expr, envs)
    else
      #logBranch 'default'
      _expr
  res

__manageUnquotedExpr = (expr, envs) ->
  manageItem = (memo, item) ->
    cons(_evaluate(next(item), envs), memo)
  reverse (reduce (createMalList (), manageItem, expr))

__manageSpliceUnquotedExpr = (expr, envs) ->
  manageItem = (memo, item) ->
    _manageItem = (_memo, _item) ->
      cons (_evaluate (_item, envs), _memo)
    reduce (memo, _manageItem, (_evaluate ((next item), envs)))
  reverse (reduce (createMalList (), manageItem, expr))

_evalQuasiquotedExpr = (expr, envs) ->
  logFn '_evalQuasiquotedExpr'
  logValue 'expr', expr, false, true
  if envs[0]['xs']
    logValue 'envs[0][xs]', envs[0]['xs'], false, true
  manageItem = (memo, item) ->
    logFn 'manageItem'
    logValue 'memo', memo, false, true
    logValue 'item', item, false, true
    switch
      when unquotedExpr? item
        logBranch 'unquotedExpr?'
        cons(_evaluate(next(item), envs), memo)
      when spliceUnquotedExpr? item
        logBranch 'spliceUnquotedExpr?'
        _manageItem = (_memo, _item) ->
          logFn '_manageItem'
          logValue '_memo', _memo, false, true
          logValue '_item', _item, false, true
          cons (_item, _memo)
        logValue '(next item)', (next item), false, true
        if envs[0]['xs']
          logValue 'envs[0][xs]', envs[0]['xs'], false, true
        logValue '_evaluate (next item)', _evaluate(next(item),envs), false, true
        reduce (memo, _manageItem, (_evaluate ((next item), envs)))
      when malList? item
        logBranch 'malList?'
        logValue 'item', item, false, true
        cons (_evalQuasiquotedExpr (item, envs), memo)
      else
        logBranch 'default'
        logValue 'item', item, false, true
        cons (item, memo)
  reverse(
    reduce (
      createMalList ()
      manageItem
      expr))

evalQuote = (head, malList, envs) ->
  car malList

evalSymbol = (malSymbol, envs) ->
  lookup (envs, (extractJsValue malSymbol))

_evaluate = (malExpr, envs) ->
  loop
    switch
      when malList? malExpr
        malList = malExpr
        head = car malList
        t1 = cdr malList
        a1 = car t1
        t2 = cdr t1
        a2 = car t2
        t3 = cdr t2
        a3 = car t3

        switch (extractJsValue head)
          when def!
            return defineNewValue (head, (cdr malList), envs) 

          when undef!
            return undefineValue (head, (cdr malList), envs) 

          when let*
            _reduce = (env, malKey, malExpr) ->
              envValue = _evaluate (malExpr, envs)
              jsKey = extractJsValue malKey
              env[jsKey] = envValue
              env
            malExpr = a2
            envs = addEnv (envs, reduceBy2 ({}, _reduce, a1))

          # How optimize tail calls?
          when _do
            return evalAllSideEffects (head, (cdr malList), envs)

          when _if
            jsBool = extractJsValue (_evaluate (a1, envs))
            malExpr = if jsBool then a2 else a3

          when fn*
            return createFn (head, (cdr malList), envs)

          when macro*
            return createMacro (head, (cdr malList), envs)

          when quote
            return evalQuote (head, (cdr malList), envs)

          when quasiquote
            #_x = logBranch 'quasiquote'
            #if envs[0]['xs']
              #logValue 'envs[0][xs]', envs[0]['xs'], false, true
            #return logResult ((evalQuasiquotedExpr (head, (cdr malList), envs)), _x)
            return evalQuasiquotedExpr (head, (cdr malList), envs)

          when spliceUnquote
            #_x = logBranch 'spliceUnquote'
            #return logResult ((__manageSpliceUnquotedExpr ((cdr malList), envs)), _x)
            return __manageSpliceUnquotedExpr ((cdr malList), envs)
            #malExpr = __manageSpliceUnquotedExpr ((cdr malList), envs)

          when unquote
            #_x = logBranch 'unquote'
            return (((z, x, y) -> x) (head, (cdr malList), envs))

          when expand-macro
            return expandMacro ((car a1), (cdr a1), envs)

          else
            malSymbol = head
            malList = cdr malList

            malInvokable = _evaluate (malSymbol, envs)

            switch
              when malMacro? malInvokable
                #logBranch 'malMacro?'
                malExpr = expandMacro (head, t1, envs)

              when malCoreFunction? malInvokable
                { fn, fnName } = extractJsValue malInvokable
                malArgs = map ((evaluate envs), malList)
                return fn malArgs

              when malUserFunction? malInvokable
                { localEnvs, malExpression, malParameters } =
                  extractJsValue malInvokable

                malArgs = map ((evaluate envs), malList)
                malExpr = malExpression
                jsParameters = map (extractJsValue, malParameters)
                newEnv = createLocalEnv (jsParameters, malArgs)
                envs = addEnv (localEnvs, newEnv)

              else
                throw 'Value is not a function'

      when malSymbol? malExpr
        return evalSymbol (malExpr, envs)

      # NOTE: Happens over and over for every malIndex.
      when malIndex? malExpr
        index = extractJsValue malExpr
        newIndex = {}
        for own key, value of index
          newIndex[key] = _evaluate (index[key], envs)
        return createMalIndex newIndex

      else
        return evalDefault (malExpr, envs)

evaluate = \envs \malExpr ->
  return commentSignal if malExpr == commentSignal
  _evaluate (malExpr, envs)

evalWithLocalValue = (head, malList, envs) ->
  _reduce = (env, malKey, malExpr) ->
    envValue = _evaluate (malExpr, envs)
    jsKey = extractJsValue malKey
    env[jsKey] = envValue
    env
  newEnv = reduceBy2 ({}, _reduce, (car malList))
  _evaluate ((next malList), addEnv (envs, newEnv))

expandMacro = (malMacroSymbol, malArgs, envs) ->
  #_x = logFn 'expandMacro'
  #logValue 'malArgs', malArgs, false, true
  malMacro = _evaluate (malMacroSymbol, envs)
  { localEnvs, malExpression, malParameters } = extractJsValue malMacro
  #logValue 'malExpression', malExpression, false, true
  #logValue 'malParameters', malParameters, false, true
  jsParameters = map (extractJsValue, malParameters)
  #logValue 'jsParameters', jsParameters, false, true
  newEnv = createLocalEnv (jsParameters, malArgs)
  #logValue 'newEnv', newEnv, true
  #if newEnv['xs']
  #  logValue 'newEnv[xs]', newEnv['xs']
  newEnvStack = addEnv (localEnvs, newEnv)
  #logResult ((_evaluate (malExpression, newEnvStack)), _x)
  _evaluate (malExpression, newEnvStack)
  #logResult (malExpression, _x)

spliceUnquote? = \malValue ->
  spliceUnquote == (extractJsValue malValue)

spliceUnquotedExpr? = \malValue ->
  malList? malValue && (spliceUnquote? (car malValue))

unquote? = \malValue ->
  unquote == (extractJsValue malValue)

unquotedExpr? = \malValue ->
  malList? malValue && (unquote? (car malValue))

module.exports = { evaluate, expandMacro }
