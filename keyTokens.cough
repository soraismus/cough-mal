keyword? = \jsString ->
  jsString in keywords

keyTokens = [
  deref              = 'deref'
  derefGlyph         = '@'
  catch*             = 'catch*'
  def!               = 'def!'
  _do                = 'do'
  expand-macro        = 'expand-macro'
  _false             = 'false'
  fn*                = 'fn*'
  _if                = 'if'

  ignore!               = 'ignore!'
  ignore!Glyph          = '#!'
  ignoreIfTrue          = 'ignoreIfTrue'
  ignoreIfTrueGlyph     = '#-'
  ignoreUnlessTrue      = 'ignoreUnlessTrue'
  ignoreUnlessTrueGlyph = '#+'

  ignore             = 'ignore'
  indexEnd           = '}'
  indexStart         = '{'
  let*               = 'let*'
  letrec*            = 'letrec*'
  listEnd            = ')'
  listStart          = '('
  macro*             = 'macro*'
  nil                = 'nil'
  _process           = '-process-'
  quasiquote         = 'quasiquote'
  quasiquoteGlyph    = '`'
  quote              = 'quote'
  quoteGlyph         = '\''
  splat              = '&'
  spliceUnquote      = 'splice-unquote'
  spliceUnquoteGlyph = '~@'
  _true              = 'true'
  try*               = 'try*'
  undef!             = 'undef!'
  unquote            = 'unquote'
  unquoteGlyph       = '~'
]

keywords = [
  catch*
  def!
  _do
  expand-macro
  _false
  fn*
  _if
  ignore
  let*
  letrec*
  macro*
  nil
  _process
  quasiquote
  quote
  spliceUnquote
  _true
  try*
  undef!
  unquote
]

macroTokens = [
  quasiquote
  quote
  spliceUnquote
  unquote
]

glyphTokens = [
  derefGlyph
  ignore!Glyph
  quasiquoteGlyph
  quoteGlyph
  spliceUnquoteGlyph
  unquoteGlyph
]

binaryGlyphTokens = [
  ignoreIfTrueGlyph
  ignoreUnlessTrueGlyph
]

module.exports = {
  binaryGlyphTokens
  deref
  derefGlyph
  catch*
  def!
  _do
  expand-macro
  _false
  fn*
  glyphTokens
  _if
  ignoreIfTrue
  ignoreIfTrueGlyph
  ignoreUnlessTrue
  ignoreUnlessTrueGlyph
  ignore
  ignore!
  ignore!Glyph
  indexEnd
  indexStart
  keyTokens
  keyword?
  let*
  letrec*
  listEnd
  listStart
  macro*
  macroTokens
  nil
  _process
  quasiquote
  quasiquoteGlyph
  quote
  quoteGlyph
  splat
  spliceUnquote
  spliceUnquoteGlyph
  _true
  try*
  undef!
  unquote
  unquoteGlyph
}
