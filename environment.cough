log = console.log
{ car }                   = require './linked-list'
{ cdr }                   = require './linked-list'
{ copy }                  = require './linked-list'
{ concat }                = require './linked-list'
{ createJsLinkedList }    = require './linked-list'
{ createMalBoolean }      = require './mal-type-utilities'
{ createMalCoreFunction } = require './mal-type-utilities'
{ createMalList }         = require './mal-type-utilities'
{ createMalNumber }       = require './mal-type-utilities'
{ createMalString }       = require './mal-type-utilities'
{ drop }                  = require './linked-list'
{ empty? }                = require './linked-list'
evaluate                  = require './evaluate'
extractJsValue            = require './extractJsValue'
{ last }                  = require './linked-list'
{ malCoreFunction? }      = require './mal-type-utilities'
{ malBoolean? }           = require './mal-type-utilities'
{ malList? }              = require './mal-type-utilities'
{ malNil? }               = require './mal-type-utilities'
{ malNumber? }            = require './mal-type-utilities'
{ malString? }            = require './mal-type-utilities'
{ malSymbol? }            = require './mal-type-utilities'
{ malUserFunction? }      = require './mal-type-utilities'
{ next }                  = require './linked-list'
_process_                 = require './process'
{ recurse }               = require './linked-list'
{ reduce }                = require './linked-list'
serialize                 = require './serialize'
{ take }                  = require './linked-list'
{ toArray }               = require './linked-list'
{ toPartialArray }        = require './linked-list'

add = (nbrs...) ->
  createMalNumber (nbrs.reduce ((x, nbr) ->  x += nbr))
subtract = (nbrs...) ->
  createMalNumber (nbrs.reduce ((x, nbr) -> x -= nbr))
multiply = (nbrs...) ->
  createMalNumber (nbrs.reduce ((x, nbr) -> x *= nbr))
divide = (nbrs...) ->
  createMalNumber (nbrs.reduce ((x, nbr) -> x /= nbr))
greaterThan = (nbrs...) ->
  createMalBoolean (nbrs[0] > nbrs[1])
lessThan = (nbrs...) ->
  createMalBoolean (nbrs[0] < nbrs[1])
lessThanOrEqual = (nbrs...) ->
  createMalBoolean (nbrs[0] <= nbrs[1])
greaterThanOrEqual = (nbrs...) ->
  createMalBoolean (nbrs[0] >= nbrs[1])

_not = \bool ->
  createMalBoolean (!bool)

lift = \fnOnJsValues \malValueList ->
  malValues = toArray malValueList
  jsValues = malValues.map \malValue -> malValue.jsValue
  fnOnJsValues jsValues...

setCoreFnsOnJsValues! = (env, fns) ->
  for own fnName, fn of fns
    env[fnName] = createMalCoreFunction (lift fn)

functionsOnJsValues = {
  '+'   : add
  '/'   : divide
  '>'   : greaterThan
  '>='  : greaterThanOrEqual
  '<'   : lessThan
  '<='  : lessThanOrEqual
  '*'   : multiply
  'not' : _not
  '-'   : subtract
}

# TODO: Refactor
# ---------------------------------------------------------
_areEqual = (malValue0, malValue1) ->
  malValue0 == malValue1 ||
    malValue0.jsValue == malValue1.jsValue

__areEqual = (malValue0, malValue1) ->
  if _areEqual (malValue0, malValue1)
    return true

  areBothLists? = malList? malValue0 && malList? malValue1

  if areBothLists?
      l0 = malValue0.jsValue
      l1 = malValue1.jsValue
      result = true
      # TODO: Make more efficient.
      until empty? l0 || empty? l1
        result = result &&
          __areEqual (l0.value, l1.value)
        l0 = recurse l0
        l1 = recurse l1
      result && empty? l0 && empty? l1
    else
      false

# TODO: Refactor.
areEqual = \jsList ->
  malValue0 = jsList.value
  cdr = recurse jsList
  malValue1 = cdr.value
  createMalBoolean (__areEqual (malValue0, malValue1))
# ---------------------------------------------------------

# TODO
apply = \jsList ->

cons = \malArgs ->
  createMalList (
    car malArgs
    next malArgs)

stem = \fn \malArgs ->
  fn (car malArgs)

_concat = \malArgs ->
  [malList0, malList1] = toPartialArray (2, malArgs)
  concat (malList0, malList1)

count = \malArgs ->
  _reduce = (sum, value) -> sum + 1
  createMalNumber (reduce (0, _reduce, (car malArgs)))

createPredicate = \pred \jsList ->
  malValue = jsList.value
  createMalBoolean (pred malValue)

# WET; cf. `_take`.
_drop = \malArgs ->
  [malNumber, malList] = toPartialArray (2, malArgs)
  drop ((extractJsValue malNumber), malList)

_evaluate_ = \jsString ->
  _process_ [environment] jsString

_evaluate = \malArgs ->
  _evaluate_ (stripQuotes (extractJsValue (car malArgs)))

list = \malArgs ->
  malArgs

load = \malArgs ->
  _evaluate_ (_read malArgs)

nth = \malArgs ->
  [malNumber, malList] = toPartialArray (2, malArgs)
  for i in [0 ... (extractJsValue malNumber)]
    malList = cdr malList
  car malList

_quit_ = ->
  process.exit 0

_read = \malArgs ->
  jsFileName = stripQuotes (extractJsValue (car malArgs))
  require('fs').readFileSync(jsFileName).toString()

read = \jsList ->
  createMalString (_read jsList)

setCoreFnsOnMalValues! = (env, fns) ->
  for own fnName, fn of fns
    env[fnName] = createMalCoreFunction fn

stripQuotes = \jsString ->
  jsString[1 .. -2]

_take = \malArgs ->
  [malNumber, malList] = toPartialArray (2, malArgs)
  take ((extractJsValue malNumber), malList)

typeOf = \malArgs ->
  malValue = car malArgs
  createMalString malValue.type 

_throw = \malArgs ->
  throw (serialize (car malArgs))

time-ms = () ->
  createMalNumber (new Date().getTime ())

write = \malArgs ->
  createMalString (serialize (car malArgs))

[boolean?, list?, nil?, number?, symbol?, string?] =
  [ malBoolean?
    malList?
    malNil?
    malNumber?
    malString?
    malSymbol?
  ].map createPredicate

[_car, _cdr, _empty?, _last] =
  [car, cdr, empty?, last].map stem

functionsOnMalValues = {
  '='        : areEqual
  'apply'    : apply
  'boolean?' : boolean?
  'car'      : _car
  'cdr'      : _cdr
  'cons'     : cons
  'concat'   : _concat
  'count'    : count
  'drop'     : _drop
  'empty?'   : _empty?
  'eval'     : _evaluate
  'last'     : _last
  'list'     : list
  'list?'    : list?
  'load'     : load
  'nil?'     : nil?
  'nth'      : nth
  'number?'  : number?
  '-quit-'   : _quit_
  'read'     : read
  'string?'  : string?
  'symbol?'  : symbol?
  'write'    : write
  'take'     : _take
  'throw'    : _throw
  'time-ms'  : time-ms
  'typeof'   : typeOf
}

environment = {}

setCoreFnsOnJsValues! (environment, functionsOnJsValues)
setCoreFnsOnMalValues! (environment, functionsOnMalValues)

module.exports = environment
