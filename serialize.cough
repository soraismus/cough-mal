commentSignal        = require './commentSignal'
{ extractJsValue }   = require './mal-type-utilities'
{ indexEnd }         = require './keyTokens'
{ indexStart }       = require './keyTokens'
{ listEnd }          = require './keyTokens'
{ listStart }        = require './keyTokens'
{ malAtom? }         = require './mal-type-utilities'
{ malCoreFunction? } = require './mal-type-utilities'
{ malIndex? }        = require './mal-type-utilities'
{ malList? }         = require './mal-type-utilities'
{ malMacro? }        = require './mal-type-utilities'
{ malNil? }          = require './mal-type-utilities'
{ malString? }       = require './mal-type-utilities'
{ malUserFunction? } = require './mal-type-utilities'
{ reduce }           = require './linked-list'

adjoinMalValue = (printReadably?) -> (memo, malValue) ->
  serialized = serialize (malValue, printReadably?)
  if memo.length == 0
    serialized
  else
    "#{memo} #{serialized}"

serialize = (malExpr, printReadably?) ->
  return commentSignal if malExpr == commentSignal
  _serialize = switch
    when malList? malExpr         then serializeList
    when malIndex? malExpr        then serializeIndex
    when malCoreFunction? malExpr then \x -> coreFunctionLabel
    when malUserFunction? malExpr then \x -> userFunctionLabel
    when malMacro? malExpr        then \x -> macroLabel
    when malNil? malExpr          then \x -> 'nil'
    when malString? malExpr       then serializeString
    when malAtom? malExpr         then serializeAtom
    when ? (malExpr.jsValue)      then extractJsValue
    else                               \x -> x
  _serialize (malExpr, printReadably?)

serializeAtom = (malAtom, printReadably?) ->
  "(atom #{serialize (malAtom.malValue, printReadably?)})"

serializeIndex = (malIndex, printReadably?) ->
  jsIndex = malIndex.jsValue

  memo = ''

  for own key, malValue of jsIndex
    memo = if memo == ''
      "#{key} #{serialize (malValue, printReadably?)}"
    else
      "#{memo}, #{key} #{serialize (malValue, printReadably?)}"

  indexStart + memo + indexEnd

serializeList = (malList, printReadably?) ->
  serializedList = reduce ("", (adjoinMalValue printReadably?), malList)
  listStart + serializedList + listEnd

serializeString = (malString, printReadably?) ->
  jsString = stripQuotes (extractJsValue malString)
  return jsString unless printReadably?
  jsString.replace(/\\/g, '\\\\')
          .replace(/"/g,  '\\"')
          .replace(/\n/g, '\\n')

# WET.
stripQuotes = \jsString ->
  jsString[1 .. -2]

coreFunctionLabel = '(core function)'
macroLabel        = '(macro)'
userFunctionLabel = '(user function)'

module.exports = serialize
