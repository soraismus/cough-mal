void UpdateLanguage(Widget widget, string message)
{
  widget.Cond(
    (Label  widget) => widget.SetText(message),
    (CLabel widget) => widget.SetText(message),
    (Group  widget) => widget.SetText(message),
    (Button widget) => widget.SetText(message),
    (Text   widget) => widget.SetText(message),
    (Combo  widget) => widget.SetText(message));
}

public interface ITextSetter
{
  void SetText(string @string);
}

public WidgetTextSetter
  : Variant<Label, CLabel, Group, Button, Text, Combo>,
    ITextSetter
{
  public static implicit operator WidgetTextSetter(
    Label  widget)
  {
    return new TextSetter(widget);
  }

  // etc.

  public WidgetTextSetter(Label  widget) : base(widget) {}
  public WidgetTextSetter(CLabel widget) : base(widget) {}
  public WidgetTextSetter(Group  widget) : base(widget) {}
  public WidgetTextSetter(Button widget) : base(widget) {}
  public WidgetTextSetter(Text   widget) : base(widget) {}
  public WidgetTextSetter(Combo  widget) : base(widget) {}

  public void SetText(string @string)
  {
    Case(
      _ => _.SetText(@string),
      _ => _.SetText(@string),
      _ => _.SetText(@string),
      _ => _.SetText(@string),
      _ => _.SetText(@string));
  }
}

void UpdateLanguage(WidgetTextSetter textSetter, string message)
{
  textSetter.SetText(message);
}

UpdateLanguage(new Button(), "click me");

-------------------------------------------

public void PrintCollection(IEnumerable collection)
{
  foreach (var item in collection)
  {
    Console.WriteLine(item.ToString());
  }
}

public void PrintCollection(IEnumerable collection)
{
  foreach (var item in collection)
  {
    if (item is IEnumerable)
    {
      PrintCollection(item);
    }

    Console.WriteLine(item.ToString());
  }
}

public void PrintCollection(IEnumerable collection)
{
  foreach (var item in collection)
  {
    if (item is IEnumerable)
    {
      PrintCollection(item);
    }

    if (item is string)
    {
      Console.WriteLine($"'{item.ToString()}'");
    }

    if (item is Float)
    {
      Console.WriteLine($"{item.ToString()}f");
    }

    Console.WriteLine(item.ToString());
  }
}

public string Stringify(object @object)
{
  return @object.Cond(
    (string s)      => $"'{s.ToString()}'",
    (float  f)      => $"{f.ToString()}f",
    (IEnumerable c) => c.Aggregate("", (m, i) => m + Stringify(i)),
    (object o)      => o.ToString());
}
public void Print(object @object)
{
  Console.WriteLine(Stringify(@object));
}

public interface IVisitor
{
   public void visitCollection(Collection collection);
   public void visitString(String string);
   public void visitFloat(Float float);
}
public interface IVisitable
{
   public void accept(Visitor visitor);
}
public class VisitableString implements IVisitable
{
   private String value;
   public VisitableString(String string) {
      value = string;
   }
   public void accept(IVisitor visitor) {
      visitor.visitString(this);
   }
}
public class PrintVisitor implements IVisitor
{
   public void visitCollection(Collection collection) {
      Iterator iterator = collection.iterator()
      while (iterator.hasNext()) {
      Object o = iterator.next();
      if (o instanceof Visitable)
         ((IVisitable)o).accept(this);
   }
   public void visitString(String string) {
      System.out.println("'"+string+"'");
   }
   public void visitFloat(Float float) {
      System.out.println(float.toString()+"f");
   }
}

Still, it seems like a lot of extra work. Worse, what happens when you add a new Visitable type, say VisitableInteger? That is one major drawback of the Visitor pattern. If you want to add a new Visitable object, you have to change the Visitor interface and then implement that method in each of your Visitor implementation classes. You could use an abstract base class Visitor with default no-op functions instead of an interface. That would be similar to the Adapter classes in Java GUIs. The problem with that approach is that you need to use up your single inheritance, which you often want to save for something else, such as extending StringWriter. It would also limit you to only be able to visit Visitable objects successfully.

Luckily, Java lets you make the Visitor pattern much more flexible so you can add Visitable objects at will. How? The answer is by using reflection. With a ReflectiveVisitor, you only need one method in your interface:

public interface ReflectiveVisitor {
   public void visit(Object o);
}

public class PrintVisitor implements ReflectiveVisitor {
   public void visitCollection(Collection collection)
   { ... same as above ... }
   public void visitString(String string)
   { ... same as above ... }
   public void visitFloat(Float float)
   { ... same as above ... }
   public void default(Object o)
   {
      System.out.println(o.toString());
   }
   public void visit(Object o) {
      // Class.getName() returns package information as well.
      // This strips off the package information giving us
      // just the class name
      String methodName = o.getClass().getName();
      methodName = "visit"+
                   methodName.substring(methodName.lastIndexOf('.')+1);
      // Now we try to invoke the method visit<methodName>
      try {
         // Get the method visitFoo(Foo foo)
         Method m = getClass().getMethod(methodName,
            new Class[] { o.getClass() });
         // Try to invoke visitFoo(Foo foo)
         m.invoke(this, new Object[] { o });
      } catch (NoSuchMethodException e) {
         // No method, so do the default implementation
         default(o);
      }
   }
}


-------------------
http://www.cs.bham.ac.uk/~hxt/research/mfps-visitors.pdf
Λβ.(Z -> β) * ((β * β) -> β)

interface IVisitor<T>
{
  T VisitLeaf(int i);
  T VisitNode(T t0, T t1);
}

interface IInterpreter<T>
{
  T InterpretInt(int i);
  T IntepretTwoTs(T t0, T t1);
}

let γ = Λβ.(Z -> β) * ((β * β) -> β) in // IVisitor's signature
  forall a. γ[a] -> a                   // IBinaryTree's signature

interface IBinaryTree
{
  T Accept<T>(IVisitor<T> visitor);
}

interface IBinaryTree
{
  T BeInterpretedBy<T>(IIntepreter<T> intepreter);
}

leaf : Z -> T
leaf i   = Λa. λ(p, q) : ((Z -> a) * ((a * a) -> a)). p i

node : (T * T) -> T
node l r   = Λa. λ(p, q) : ((Z -> a) * ((a * a) -> a)). q (l[a]p q) (r[a] p q)

class Leaf : IBinaryTree
{
  private readonly int @int;
  public Leaf(int @int) { .. }
  public T Accept<T>(IVisitor<T> visitor)
  {
    return visitor.VisitLeaf(@int);
  }
}

class Leaf : IBinaryTree
{
  private readonly int _int;
  public Leaf(int @int) { .. }
  public T BeIntepretedBy<T>(IIntepreter<T> intepreter)
  {
    return intepreter.IntepretInt(_int);
  }
}

class Node : IBinaryTree
{
  private readonly IBinaryTree _binaryTree0;
  private readonly IBinaryTree _binaryTree1;
  public Node(
    IBinaryTree binaryTree0, 
    IBinaryTree binaryTree1) { ... } 
  public T Accept<T>(IVisitor<T> visitor)
  {
    return visitor.VisitNode(
      _binaryTree0.Accept(visitor),  // interpret node 0
      _binaryTree1.Accept(visitor)); // interpret node 1
  }
}

class Node : IBinaryTree
{
  private readonly IBinaryTree _binaryTree0;
  private readonly IBinaryTree _binaryTree1;
  public Node(
    IBinaryTree binaryTree0, 
    IBinaryTree binaryTree1) { ... } 
  public T BeInterpretedBy<T>(IIntepreter<T> intepreter)
  {
    return intepreter.InterpretTwoTs(           // (T, T) -> T
      _binaryTree0.BeIntepretedBy(intepreter),  // interpret node 0; returns T
      _binaryTree1.BeIntepretedBy(intepreter)); // interpret node 1; returns T
  }
}

concreteVisitor : (Z -> Z) * ((Z * Z) -> Z)

sum : B -> Z
sum = λt:T.t[Z}(λx:Z.x, λ(x, y):(Z * Z).(x + y))

class SumVisitor : IVisitor<int>
{
  int VisitLeaf(int i) { return i; }
  int VisitNode(int i0, int i1) { return i0 + i1; }
}
