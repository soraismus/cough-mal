log = console.log
{ malTypes } = require './mal-types'
malListType = malTypes[4]

car = \malList ->
  malList.value

cdr = \malList ->
  malList.next

concat = (malList0, malList1) ->
  return malList1 if empty? malList0
  result = malList0
  prior = malList0
  current = cdr malList0
  until empty? current
    prior = cdr prior
    current = cdr current
  prior.next = malList1
  result

createMalList = (value, nextNode) ->
  return EOL unless ? value
  createNode (value, nextNode ?? EOL)

createNode = (value, nextNode) ->
  { type: malListType, value, next : nextNode }

forEach = (fn, list) ->
  result = list
  until empty? list
    result = fn list.value
    list = recurse list
  result

empty? = \value ->
  value == EOL

last = \malList ->
  prior = malList
  current = cdr malList
  until empty? current
    prior = cdr prior
    current = cdr current
  car prior

map = (fn, list) ->
  _reduce = (list, value) ->
    createMalList ((fn value), list)
  reverse (reduce (EOL, _reduce, list))

next = \malList ->
  car (cdr malList)

recurse = \list ->
  if empty? list then list else list.next

reduce = (seed, fn, list) ->
  until empty? list
    seed = fn (seed, list.value)
    list = recurse list
  seed

reduceBy2 = (seed, fn, list) ->
  until empty? list
    value0 = list.value
    list = recurse list
    value1 = list.value
    seed = fn (seed, value0, value1)
    list = recurse list
  seed

reverse = \list ->
  result = EOL
  until empty? list
    result = createMalList (list.value, result)
    list = list.next
  result

safeHead = \malList ->
  if empty? list then list else list.value

safeNext = \malList ->
  safeHead (recurse malList)

toArray = \list ->
  _reduce = (jsArray, value) ->
    jsArray.push value
    jsArray
  reduce ([], _reduce, list)

zip = (seed, fn, list0, list1) ->
  until empty? list0 || empty? list1
    value0 = car list0
    list0 = cdr list0
    value1 = car list1
    list1 = cdr list1
    seed = fn (seed, value0, value1)
  seed

_EOL = {}

EOL = createNode (_EOL, _EOL)

module.exports = {
  car
  cdr
  concat
  createMalList
  empty?
  forEach
  last
  map
  next
  recurse
  reduce
  reduceBy2
  reverse
  safeHead
  safeNext
  toArray
}
